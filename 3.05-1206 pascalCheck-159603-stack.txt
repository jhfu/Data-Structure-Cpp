/*code is far away from bug with the animal protecting
 * ┏┓　　　┏┓
 *┏┛┻━━━┛┻┓
 *┃　　　　　　　┃
 *┃　　　━　　　┃
 *┃　┳┛　┗┳　┃
 *┃　　　　　　　┃
 *┃　　　┻　　　┃
 *┃　　　　　　　┃
 *┗━┓　　　┏━┛
 *　　┃　　　┃神兽保佑
 *　　┃　　　┃代码无BUG！
 *　　┃　　　┗━━━┓
 *　　┃　　　　　　　┣┓
 *　　┃　　　　　　　┏┛
 *　　┗┓┓┏━┳┓┏┛
 *　　　┃┫┫　┃┫┫
 *　　　┗┻┛　┗┻┛
 *
 */


#include <iostream>
using namespace std;



/************Class LINKSTACK Definition and Implementation ******************/

template <class T>
class stack {
    
public:
    virtual bool isEmpty()const =0;
    virtual void push(const T &x)=0;
    virtual T pop()=0;
    virtual T read()const =0;
    virtual ~stack(){};
};


template <class T>
class linkStack:public stack<T> {
    struct node{
        T data;
        node *next;
        node(const T &x,node *n=NULL):data(x),next(n){};
        node():next(NULL){};
        ~node(){};
    };
    node *top;
public:
    linkStack(){    top=NULL;   }
    ~linkStack();
    bool isEmpty()const{    return top==NULL;   }
    void push(const T &x);
    T pop();
    T read()const;
};

template <class T>
linkStack<T>::~linkStack(){
    node *temp;
    while (top!=NULL) {
        temp=top;
        top=top->next;
        delete temp;
    }
    
}

template <class T>
void linkStack<T>:: push(const T &x) {
    node *temp;
    temp=new node(x,top);
    top=temp;
}

template <class T>
T linkStack<T>:: pop() {
    node *temp=top;
    T data=top->data;
    top=top->next;
    delete temp;
    return data;
}

template <class T>
T linkStack<T>::read()const {
    return top->data;
}



/*******************MAIN ******************/

enum symbol{BEGIN,END,IF,THEN,ELSE,FINISH,IFTHEN};

void check(char *line,bool &checkFinished,bool &error,linkStack<symbol> &sb){
    if (line[0]=='\0') {
        checkFinished=1;
        if (sb.isEmpty()) {
            error=0;
        }
        else {
            error=1;
        }
        
    }
    else{
        int i=0;
        while (line[i]!='\0') {
            if (line[i]=='b'&&line[i+1]=='e'&&line[i+2]=='g'&&line[i+3]=='i'&&line[i+4]=='n') {
                sb.push(BEGIN);
            }
            else if (line[i]=='e'&&line[i+1]=='n'&&line[i+2]=='d'){
                if (sb.isEmpty()|| sb.read()!=BEGIN) {
                    error=1;
                    break;
                }
                else{
                    sb.pop();
                }
            }
            else if(line[i]=='i'&&line[i+1]=='f'){
                sb.push(IF);
            }
            else if(line[i]=='t'&&line[i+1]=='h'&&line[i+2]=='e'&&line[i+3]=='n'){
                if (sb.isEmpty()||sb.read()==IF) {
                    sb.pop();
                    sb.push(IFTHEN);
                }
                else{
                    error=1;
                    break;
                }
            }
            else if (line[i]=='e'&&line[i+1]=='l'&&line[i+2]=='s'&&line[i+3]=='e'){
                if (sb.isEmpty()||sb.read()!=IFTHEN) {
                    error=1;
                    break;
                }
                else{
                    sb.pop();
                }
            }
            i++;
        }
    }
    
}

int main(){
    
    bool checkFinished=0;
    bool error=0;
    linkStack<symbol> sb;
    
    char line[999];
    while(checkFinished==0&&error==0){
        cin.getline(line, 999);
        check(line, checkFinished, error, sb);
    }
    
    if (error==0) {
        cout<<"Match!"<<endl;
    }
    else{
        cout<<"Error!"<<endl;
    }
    
    return 0;
}


//                            _ooOoo_
//                           o8888888o
//                           88" . "88
//                           (| -_- |)
//                            O\ = /O
//                        ____/`---'\____
//                      .   ' \\| |// `.
//                       / \\||| : |||// \
//                     / _||||| -:- |||||- \
//                       | | \\\ - /// | |
//                     | \_| ''\---/'' | |
//                      \ .-\__ `-` ___/-. /
//                   ___`. .' /--.--\ `. . __
//                ."" '< `.___\_<|>_/___.' >'"".
//               | | : `- \`.;`\ _ /`;.`/ - ` : | |
//                 \ \ `-. \_ __\ /__ _/ .-` / /
//         ======`-.____`-.___\_____/___.-`____.-'======
//                            `=---='
//
//         .............................................
//                  佛祖保佑             永无BUG
//          佛曰:
//                  写字楼里写字间，写字间里程序员；
//                  程序人员写程序，又拿程序换酒钱。
//                  酒醒只在网上坐，酒醉还来网下眠；
//                  酒醉酒醒日复日，网上网下年复年。
//                  但愿老死电脑间，不愿鞠躬老板前；
//                  奔驰宝马贵者趣，公交自行程序员。
//                  别人笑我忒疯癫，我笑自己命太贱；
//                  不见满街漂亮妹，哪个归得程序员？

