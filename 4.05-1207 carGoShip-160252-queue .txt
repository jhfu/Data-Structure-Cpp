/*code is far away from bug with the animal protecting
 * ┏┓　　　┏┓
 *┏┛┻━━━┛┻┓
 *┃　　　　　　　┃
 *┃　　　━　　　┃
 *┃　┳┛　┗┳　┃
 *┃　　　　　　　┃
 *┃　　　┻　　　┃
 *┃　　　　　　　┃
 *┗━┓　　　┏━┛
 *　　┃　　　┃神兽保佑
 *　　┃　　　┃代码无BUG！
 *　　┃　　　┗━━━┓
 *　　┃　　　　　　　┣┓
 *　　┃　　　　　　　┏┛
 *　　┗┓┓┏━┳┓┏┛
 *　　　┃┫┫　┃┫┫
 *　　　┗┻┛　┗┻┛
 *
 */


#include <iostream>
#include <iomanip>
using namespace std;


/************Class linkQueue Definition and Implementation ******************/

template <class T>
class queue {
    
public:
    virtual bool isEmpty()const=0;
    virtual void enQueue(const T &x)=0;
    virtual T deQueue()=0;
    virtual T getHead() const=0;
    virtual ~queue(){}
};

template <class T>
class linkQueue:public queue<T> {
    struct node{
        T data;
        node *next;
        node(const T &x,node *n=NULL):data(x),next(n){}
        node():next(NULL){}
        ~node(){}
    };
    node *head,*rear;
    
public:
    linkQueue(){head=rear=NULL;}
    ~linkQueue();
    bool isEmpty()const{return head==NULL;}
    void enQueue(const T &x);
    T deQueue();
    T getHead()const{return head->data;}
};

template <class T>
linkQueue<T>::~linkQueue() {
    node *temp;
    while (head!=NULL) {
        temp=head;
        head=head->next;
        delete temp;
    }
}

template <class T>
void linkQueue<T>::enQueue(const T &x) {
    if (head==NULL) {
        head=new node(x);
        rear=head;
    }
    else{
        node *temp=new node(x);
        rear->next=temp;
        rear=temp;
    }
}

template <class T>
T linkQueue<T>::deQueue() {
    T value=head->data;
    node *temp=head;
    head=head->next;
    if (head==NULL) {
        rear=NULL;
    }
    delete temp;
    return value;
}


/*******************MAIN ******************/

void busBoard(int *car, int *busWaittingTimeAll,bool *busFinished,const int currentTime,linkQueue<int> *busQueue){
    for (int i=0; i<4; i++) {
        if (*car==10) {
            break;
        }
        else if (!busQueue->isEmpty()) {
            if (busQueue->getHead()<=currentTime) {
                *busWaittingTimeAll+=currentTime-busQueue->deQueue();
                (*car)++;
            }
            else{
                *busFinished=1;
                break;
            }
        }
        else{
            *busFinished=1;
            break;
        }
    }
}

void truckBoard(int *car, int *truckWaittingTimeAll,bool *truckFinished,const bool busFinished,const int currentTime,linkQueue<int> * truckQueue){
    if (busFinished==1) {
        while (1) {
            if (!truckQueue->isEmpty()) {
                if (truckQueue->getHead()<=currentTime) {
                    *truckWaittingTimeAll+=currentTime-truckQueue->deQueue();
                    (*car)++;
                }
                else{
                    *truckFinished=1;
                    break;
                }
            }
            else{
                *truckFinished=1;
                break;
            }
            if (*car==10) {
                *truckFinished=1;
                break;
            }
        }
    }
    else{
        if (!truckQueue->isEmpty()) {
            if (truckQueue->getHead()<=currentTime) {
                *truckWaittingTimeAll+=currentTime-truckQueue->deQueue();
                (*car)++;
            }
            else{
                *truckFinished=1;
            }
        }
        else{
            *truckFinished=1;
        }
    }
}

void getInput(int *busNumber,int *truckNumber,linkQueue<int> *busQueue,linkQueue<int> *truckQueue){
    
    int num,type,comingTime;
    cin>>num;
    for (int i=0; i<num; i++) {
        cin>>type>>comingTime;
        if (type==0) {  //bus
            busQueue->enQueue(comingTime);
            (*busNumber)++;
        }
        else if(type==1){
            truckQueue->enQueue(comingTime);
            (*truckNumber)++;
        }
    }
}

int main(){
    
    linkQueue<int> busQueue;
    linkQueue<int> truckQueue;
    int busNumber=0;
    int truckNumber=0;
    getInput(&busNumber, &truckNumber,&busQueue,&truckQueue);
    
    int busWaittingTimeAll=0;
    int truckWaittingTimeAll=0;
    int currentTime=0;
    
    
    while (1) {
        int carOnShip=0;
        bool busFinished=0;
        bool truckFinished=0;
        
        while (1) {
            
            if (busFinished==0) {
                busBoard(&carOnShip, &busWaittingTimeAll, &busFinished, currentTime, &busQueue);
            }
            if (carOnShip==10) {
                break;
            }
            
            if (truckFinished==0) {
                truckBoard(&carOnShip, &truckWaittingTimeAll, &truckFinished, busFinished, currentTime,&truckQueue);
            }
            if (carOnShip==10||(busFinished==1&&truckFinished==1)) {
                break;
            }
        }
        currentTime+=10;
        
        if (busQueue.isEmpty()&&truckQueue.isEmpty()) {
            break;
        }
    }

    cout<<fixed<<setprecision(3)<<double(busWaittingTimeAll)/busNumber<<' '<<double(truckWaittingTimeAll)/truckNumber<<endl;
    
    return 0;
}


//                            _ooOoo_
//                           o8888888o
//                           88" . "88
//                           (| -_- |)
//                            O\ = /O
//                        ____/`---'\____
//                      .   ' \\| |// `.
//                       / \\||| : |||// \
//                     / _||||| -:- |||||- \
//                       | | \\\ - /// | |
//                     | \_| ''\---/'' | |
//                      \ .-\__ `-` ___/-. /
//                   ___`. .' /--.--\ `. . __
//                ."" '< `.___\_<|>_/___.' >'"".
//               | | : `- \`.;`\ _ /`;.`/ - ` : | |
//                 \ \ `-. \_ __\ /__ _/ .-` / /
//         ======`-.____`-.___\_____/___.-`____.-'======
//                            `=---='
//
//         .............................................
//                  佛祖保佑             永无BUG
//          佛曰:
//                  写字楼里写字间，写字间里程序员；
//                  程序人员写程序，又拿程序换酒钱。
//                  酒醒只在网上坐，酒醉还来网下眠；
//                  酒醉酒醒日复日，网上网下年复年。
//                  但愿老死电脑间，不愿鞠躬老板前；
//                  奔驰宝马贵者趣，公交自行程序员。
//                  别人笑我忒疯癫，我笑自己命太贱；
//                  不见满街漂亮妹，哪个归得程序员？